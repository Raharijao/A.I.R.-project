# -*- coding: utf-8 -*-
"""Popup with Box.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REWqRSJIANXWmwhirzcShb6Xl-oTN-SY

References

Example: https://livecodestream.dev/post/how-to-plot-your-data-on-maps-using-python-and-folium/

Docs: https://python-visualization.github.io/folium/quickstart.html

Example of flask: https://python-visualization.github.io/folium/flask.html

Tile templates: http://leaflet-extras.github.io/leaflet-providers/preview/
"""

#import required libraries
import pandas as pd
import numpy as np
import os
#!pip install folium
import folium
from datetime import datetime

data = pd.DataFrame()

# https://www.airnowapi.org/aq/data/?startDate=2021-11-06T01&endDate=2021-11-06T02&parameters=OZONE,PM25,PM10,CO,NO2,SO2&BBOX=-90.425033,38.465790,-90.043258,38.789786&dataType=A&format=text/csv&verbose=1&monitorType=0&includerawconcentrations=1&API_KEY=211FD3EB-9CFC-47AE-9657-FD48194D0382
latitude = '38.580917'
longitude = '-90.244598'
distance = '25'
API_KEY = '211FD3EB-9CFC-47AE-9657-FD48194D0382'
#url = 'https://www.airnowapi.org/aq/data/?startDate=2021-11-06T01&endDate=2021-11-06T01:59&parameters=OZONE,PM25,PM10,CO,NO2,SO2&BBOX=-90.425033,38.465790,-90.043258,38.789786&dataType=A&format=text/csv&verbose=1&monitorType=0&includerawconcentrations=1&API_KEY=211FD3EB-9CFC-47AE-9657-FD48194D0382' #'https://www.airnowapi.org/aq/observation/latLong/current/?format=text/csv&latitude=' + latitude + '&longitude=' + longitude + '&distance=' + distance + '&API_KEY=' + API_KEY
#url = 'https://www.airnowapi.org/aq/data/?startDate=2021-11-07T20&endDate=2021-11-07T21&parameters=OZONE,PM25,PM10,CO,NO2,SO2&BBOX=-127.369132,25.826774,-51.783195,49.401810&dataType=A&format=text/csv&verbose=0&monitorType=0&includerawconcentrations=1&API_KEY=211FD3EB-9CFC-47AE-9657-FD48194D0382'
while True:
    ct = datetime.utcnow()
    if(ct.minute == 10):
        url = f'https://www.airnowapi.org/aq/data/?startDate={ct.year}-{ct.month}-{ct.day}T{ct.hour}&endDate={ct.year}-{ct.month}-{ct.day}T{ct.hour}&parameters=OZONE,PM25,PM10,CO,NO2,SO2&BBOX=-127.369132,25.826774,-51.783195,49.401810&dataType=A&format=text/csv&verbose=1&monitorType=2&includerawconcentrations=1&API_KEY=211FD3EB-9CFC-47AE-9657-FD48194D0382'
        data = pd.read_csv(url, header=None)
    #url = f'https://www.airnowapi.org/aq/data/?startDate={ct.year}-{ct.month}-{ct.day}T{ct.hour}&endDate={ct.year}-{ct.month}-{ct.day}T{ct.hour}&parameters=OZONE,PM25,PM10,CO,NO2,SO2&BBOX=-127.369132,25.826774,-51.783195,49.401810&dataType=A&format=text/csv&verbose=1&monitorType=2&includerawconcentrations=1&API_KEY=211FD3EB-9CFC-47AE-9657-FD48194D0382'
    #data = pd.read_csv(url, header=None)
    #data

        #data.columns = ['Latitude', 'Longitude', 'DateObserved', 'ParameterName', 'Concentration','AQI', 'CategoryNumber', 'ReportingArea', 'Source', 'SiteNumber', 'SiteNumberExtension']
        data.columns = ['Latitude', 'Longitude', 'DateObserved', 'ParameterName', 'Concentration','AQI', 'CategoryNumber', 'ReportingArea', 'Source', 'SiteNumber', 'SiteNumberExtension']

        data.sort_values('Latitude')

        #add category names based on the category number
        category_names = []

        for i in range(0,len(data)):
          if(data.loc[i,'AQI']<=50):
            category_names.append('Good')
          elif(data.loc[i,'AQI']<=100):
            category_names.append('Moderate')
          elif(data.loc[i,'AQI']<=150):
            category_names.append('Unhealthy for Sensitive Groups')
          elif(data.loc[i,'AQI']<=200):
            category_names.append('Unhealthy')
          elif(data.loc[i,'AQI']<=300):
            category_names.append('Very Unhealthy')
          elif(data.loc[i,'AQI']<=500):
            category_names.append('Hazardous')

        category_names
        data.insert(7,'CategoryName',category_names,True)

        #removing irrelevant category numbers
        data = data[data['CategoryNumber']!=0]

        #np.unique(data['CategoryNumber'])

        i=1
        locations = []
        for g in data.groupby(['Latitude','Longitude']):
          #print(i)
          locations.append(g)
          i=i+1

        #for getting the info of the max pollutant
        max_pollutant_info = []
        for loc in range(0,len(locations)):
          max_pollutant_one_location = []
          date_index = np.where(locations[loc][1]['DateObserved'].values==(max(locations[loc][1]['DateObserved'].values)))

          #print(locations[loc][1]['AQI'].values) #printing all AQI values
          index = np.where(locations[loc][1]['AQI'].values[date_index]==(max(locations[loc][1]['AQI'].values[date_index])))
          index = np.array(index+date_index[0][0]).tolist()[0][0]

          #print(index[0]) #checking if the max is chosen
          #print(locations[loc][1]['ParameterName'].values[index], locations[loc][1]['CategoryName'].values[index]) #checking if the required values ar eprinted correctly
          max_pollutant_one_location.append(index)
          max_pollutant_one_location.append(np.array(date_index).tolist()[0][0])
          max_pollutant_one_location.append(locations[loc][1]['DateObserved'].values[index])
          max_pollutant_one_location.append(locations[loc][1]['Latitude'].values[index])
          max_pollutant_one_location.append(locations[loc][1]['Longitude'].values[index])
          max_pollutant_one_location.append(locations[loc][1]['ReportingArea'].values[index])
          max_pollutant_one_location.append(locations[loc][1]['ParameterName'].values[index])
          max_pollutant_one_location.append(locations[loc][1]['AQI'].values[index])
          max_pollutant_one_location.append(locations[loc][1]['CategoryName'].values[index])

          max_pollutant_info.append(max_pollutant_one_location)

        #colors for different air quality groups
        color_map = {
            'Good': '#00e400',
            'Moderate': '#ffff00',
            'Unhealthy for Sensitive Groups': '#ff7e00',
            'Unhealthy': '#ff0000',
            'Very Unhealthy': '#8f3f97',
            'Hazardous': '#7e0023'
        }

        #pollutant type
        pollutant = "OZONE"

        #radius of the circle in meters (converting from miles to meters)
        radius = 700 * 1.60934

        #display St.Louis map in the beginning
        lat = 38.580917
        lon = -90.244598
        #creates and stores the map in m
        m = folium.Map(location=[lat, lon], zoom_start=12, tiles="Stamen Terrain", zoom_control=False)
        #m = folium.Map(location=[lat, lon], zoom_start=12, zoom_control=False,
          #tiles = 'https://tiles.stadiamaps.com/tiles/osm_bright/{z}/{x}/{y}{r}.png?api_key=446b4cdf-1001-4780-83dd-1dabe1b99d5c',
                  #attr = '&copy; <a href="https://stadiamaps.com/">Stadia Maps</a>, &copy; <a href="https://openmaptiles.org/">OpenMapTiles</a> &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors')


        for i in range(0,len(max_pollutant_info)):

          popup_text = ''
          for j in range(max_pollutant_info[i][1],len(locations[i][1])):
            popup_text =  popup_text + locations[i][1]['ParameterName'].values.tolist()[j] + ': ' + str(locations[i][1]['AQI'].values.tolist()[j]) + ' (' + locations[i][1]['CategoryName'].values.tolist()[j]+ ')'
            popup_text = popup_text + '<br>'

          iframe = folium.IFrame(popup_text, figsize=(3,0.6+(0.32*(len(locations[i][1])-max_pollutant_info[i][1]))))
          popup = folium.Popup(iframe)

          color = color_map[max_pollutant_info[i][8]]

          marker = folium.Circle(
              location=[max_pollutant_info[i][3], max_pollutant_info[i][4]],
              color=color,
              radius=radius,
              fill=True,
              opacity=0.5,
              fill_opacity=0.5,
              tooltip='Dominant Pollutant: {}'.format(max_pollutant_info[i][6]),
               popup=popup,
          ).add_to(m)

        m.save(f'map_{ct.year}_{ct.month}_{ct.day}_{ct.hour}_{ct.minute}.html')
        #delete previous day's map (T-25)
        myfile=f'map_{ct.year}_{ct.month}_{ct.day-1}_{ct.hour-1}_{ct.minute}.html'
        if os.path.isfile(myfile):
            os.remove(myfile)
